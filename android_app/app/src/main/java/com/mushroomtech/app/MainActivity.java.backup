package com.mushroomtech.app;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.firebase.FirebaseApp;
import com.google.firebase.database.FirebaseDatabase;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainActivity extends AppCompatActivity implements FirebaseApiService.EnvironmentalDataListener {
    
    private CircularMeterView temperatureMeter;
    private CircularMeterView humidityMeter;
    private CircularMeterView co2Meter;
    private TextView temperatureValue;
    private TextView humidityValue;
    private TextView co2Value;
    private TextView systemStatus;
    private Button waterPumpButton;
    private Button fanButton;
    private Button lightButton;
    private Button dataAnalysisButton;
    private FloatingActionButton aiChatFab;
    private CardView statusCard;
    
    private FirebaseApiService firebaseApiService;
    private Handler mainHandler;
    private ExecutorService executorService;
    private boolean isRealTimeListening = false;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        try {
            setContentView(R.layout.activity_main);
            
            // Initialize Firebase with error handling
            initializeFirebase();
            
            // Initialize views with null checks
            initializeViews();
            
            // Setup services
            setupServices();
            
            // Setup click listeners
            setupClickListeners();
            
            // Start real-time updates
            startRealTimeUpdates();
            
        } catch (Exception e) {
            // Log error and show simple fallback UI
            showToast("Error initializing app: " + e.getMessage());
            // Create a simple fallback layout
            createFallbackUI();
        }
    }
    
    private void createFallbackUI() {
        try {
            TextView errorText = new TextView(this);
            errorText.setText("Mushroom Tech App\n\nInitialization in progress...\nPlease wait or restart the app.");
            errorText.setPadding(40, 40, 40, 40);
            errorText.setTextSize(16);
            setContentView(errorText);
        } catch (Exception e) {
            // Last resort - just show toast
            showToast("Critical error - please reinstall app");
        }
    }
    
    private void initializeFirebase() {
        try {
            // Initialize Firebase if not already done
            if (FirebaseApp.getApps(this).isEmpty()) {
                FirebaseApp.initializeApp(this);
            }
            
            // Enable offline persistence with error handling
            try {
                FirebaseDatabase.getInstance().setPersistenceEnabled(true);
            } catch (Exception e) {
                // Persistence might already be enabled - not critical
            }
        } catch (Exception e) {
            showToast("Firebase initialization failed: " + e.getMessage());
            throw e;
        }
    }
    
    private void initializeViews() {
        try {
            // Initialize views with null checks
            temperatureMeter = findViewById(R.id.temperatureMeter);
            humidityMeter = findViewById(R.id.humidityMeter);
            co2Meter = findViewById(R.id.co2Meter);
            temperatureValue = findViewById(R.id.temperatureValue);
            humidityValue = findViewById(R.id.humidityValue);
            co2Value = findViewById(R.id.co2Value);
            systemStatus = findViewById(R.id.systemStatus);
            waterPumpButton = findViewById(R.id.waterPumpButton);
            fanButton = findViewById(R.id.fanButton);
            lightButton = findViewById(R.id.lightButton);
            dataAnalysisButton = findViewById(R.id.dataAnalysisButton);
            aiChatFab = findViewById(R.id.aiChatFab);
            statusCard = findViewById(R.id.statusCard);
            
            // Setup meters only if they exist
            setupMeters();
        } catch (Exception e) {
            showToast("Error initializing views: " + e.getMessage());
            throw e;
        }
    }
    
    private void setupMeters() {
        try {
            // Temperature meter (0-50°C) - with null check
            if (temperatureMeter != null) {
                temperatureMeter.setRange(0, 50);
                temperatureMeter.setOptimalRange(25, 28);
                temperatureMeter.setMeterColor(getResources().getColor(R.color.dark_green));
                temperatureMeter.setProgressColor(getResources().getColor(R.color.bright_green));
                temperatureMeter.setUnit("°C");
            }
            
            // Humidity meter (0-100%) - with null check
            if (humidityMeter != null) {
                humidityMeter.setRange(0, 100);
                humidityMeter.setOptimalRange(60, 80);
                humidityMeter.setMeterColor(getResources().getColor(R.color.dark_green));
                humidityMeter.setProgressColor(getResources().getColor(R.color.bright_green));
                humidityMeter.setUnit("%");
            }
            
            // CO2 meter (300-1000 ppm) - with null check
            if (co2Meter != null) {
                co2Meter.setRange(300, 1000);
                co2Meter.setOptimalRange(400, 500);
                co2Meter.setMeterColor(getResources().getColor(R.color.dark_green));
                co2Meter.setProgressColor(getResources().getColor(R.color.bright_green));
                co2Meter.setUnit("ppm");
            }
        } catch (Exception e) {
            showToast("Error setting up meters: " + e.getMessage());
            // Continue without meters if they fail
        }
    }
    
    private void setupServices() {
        try {
            firebaseApiService = new FirebaseApiService();
            mainHandler = new Handler(getMainLooper());
            executorService = Executors.newFixedThreadPool(3);
        } catch (Exception e) {
            showToast("Error setting up services: " + e.getMessage());
        }
    }
    
    private void setupClickListeners() {
        try {
            if (waterPumpButton != null) {
                waterPumpButton.setOnClickListener(v -> toggleWaterPump());
            }
            if (fanButton != null) {
                fanButton.setOnClickListener(v -> toggleFan());
            }
            if (lightButton != null) {
                lightButton.setOnClickListener(v -> toggleLight());
            }
            if (dataAnalysisButton != null) {
                dataAnalysisButton.setOnClickListener(v -> openDataAnalysis());
            }
            if (aiChatFab != null) {
                aiChatFab.setOnClickListener(v -> openAIChat());
            }
        } catch (Exception e) {
            showToast("Error setting up click listeners: " + e.getMessage());
        }
    }
    
    private void startRealTimeUpdates() {
        try {
            if (!isRealTimeListening && firebaseApiService != null) {
                firebaseApiService.listenForRealTimeUpdates(this);
                isRealTimeListening = true;
                showToast("Connected to Firebase - Real-time updates enabled");
            }
        } catch (Exception e) {
            showToast("Error starting real-time updates: " + e.getMessage());
        }
    }
    
    @Override
    public void onDataUpdate(EnvironmentalData data) {
        if (mainHandler != null) {
            mainHandler.post(() -> {
                if (data != null) {
                    updateUI(data);
                } else {
                    showConnectionError();
                }
            });
        }
    }
    
    @Override
    public void onError(Exception error) {
        if (mainHandler != null) {
            mainHandler.post(() -> {
                showConnectionError();
                showToast("Firebase error: " + error.getMessage());
            });
        }
    }
    
    private void updateUI(EnvironmentalData data) {
        try {
            // Update temperature
            if (data.temperature != 0) {
                if (temperatureMeter != null) {
                    temperatureMeter.setValue((float) data.temperature);
                }
                if (temperatureValue != null) {
                    temperatureValue.setText(String.format("%.1f°C", data.temperature));
                }
            }
            
            // Update humidity
            if (data.humidity != 0) {
                if (humidityMeter != null) {
                    humidityMeter.setValue((float) data.humidity);
                }
                if (humidityValue != null) {
                    humidityValue.setText(String.format("%.1f%%", data.humidity));
                }
            }
            
            // Update CO2 (simulated for now)
            float co2Level = 400 + (float)(Math.random() * 200);
            if (co2Meter != null) {
                co2Meter.setValue(co2Level);
            }
            if (co2Value != null) {
                co2Value.setText(String.format("%.0f ppm", co2Level));
            }
            
            // Update system status
            updateSystemStatus(data);
            
            // Update button states
            updateButtonStates(data);
            
        } catch (Exception e) {
            showToast("Error updating UI: " + e.getMessage());
        }
    }
    
    private void updateSystemStatus(EnvironmentalData data) {
        try {
            if (systemStatus != null) {
                StringBuilder status = new StringBuilder();
                status.append("🔄 System Status: ");
                
                if (data.heaterStatus || data.humidifierStatus || data.aquariumPumpStatus) {
                    status.append("Active\n");
                } else {
                    status.append("Standby\n");
                }
                
                if (data.heaterStatus) {
                    status.append("🔥 Heater: ON\n");
                }
                if (data.humidifierStatus) {
                    status.append("💨 Humidifier: ON\n");
                }
                if (data.aquariumPumpStatus) {
                    status.append("🚰 Water Pump: ON\n");
                }
                
                // ESP32 connection status
                if (data.esp32Connected) {
                    status.append("📡 ESP32: Connected\n");
                } else {
                    status.append("📡 ESP32: Disconnected\n");
                }
                
                systemStatus.setText(status.toString());
            }
        } catch (Exception e) {
            showToast("Error updating system status: " + e.getMessage());
        }
    }
    
    private void updateButtonStates(EnvironmentalData data) {
        try {
            if (waterPumpButton != null) {
                waterPumpButton.setBackgroundColor(data.aquariumPumpStatus ? 
                    getResources().getColor(R.color.bright_green) : 
                    getResources().getColor(R.color.dark_green));
            }
            
            if (fanButton != null) {
                fanButton.setBackgroundColor(data.humidifierStatus ? 
                    getResources().getColor(R.color.bright_green) : 
                    getResources().getColor(R.color.dark_green));
            }
            
            if (lightButton != null) {
                lightButton.setBackgroundColor(data.heaterStatus ? 
                    getResources().getColor(R.color.bright_green) : 
                    getResources().getColor(R.color.dark_green));
            }
        } catch (Exception e) {
            showToast("Error updating button states: " + e.getMessage());
        }
    }
    
    private void showConnectionError() {
        try {
            if (statusCard != null) {
                statusCard.setCardBackgroundColor(getResources().getColor(R.color.error_red));
            }
            if (systemStatus != null) {
                systemStatus.setText("❌ Connection Error\nCheck your internet connection and Firebase settings");
            }
        } catch (Exception e) {
            showToast("Connection error display failed: " + e.getMessage());
        }
    }
    
    private void toggleWaterPump() {
        try {
            if (firebaseApiService != null) {
                executorService.execute(() -> {
                    try {
                        firebaseApiService.toggleWaterPump();
                        mainHandler.post(() -> showToast("Water pump toggled"));
                    } catch (Exception e) {
                        mainHandler.post(() -> showToast("Failed to toggle water pump: " + e.getMessage()));
                    }
                });
            }
        } catch (Exception e) {
            showToast("Error toggling water pump: " + e.getMessage());
        }
    }
    
    private void toggleFan() {
        try {
            showToast("Fan control - Coming soon!");
        } catch (Exception e) {
            showToast("Error with fan control: " + e.getMessage());
        }
    }
    
    private void toggleLight() {
        try {
            showToast("Light control - Coming soon!");
        } catch (Exception e) {
            showToast("Error with light control: " + e.getMessage());
        }
    }
    
    private void openDataAnalysis() {
        try {
            showToast("Data analysis - Coming soon!");
        } catch (Exception e) {
            showToast("Error opening data analysis: " + e.getMessage());
        }
    }
    
    private void openAIChat() {
        try {
            Intent intent = new Intent(this, AIAnalysisActivity.class);
            startActivity(intent);
        } catch (Exception e) {
            showToast("Error opening AI chat: " + e.getMessage());
        }
    }
    
    private void showToast(String message) {
        try {
            if (this != null && !this.isFinishing()) {
                Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
            }
        } catch (Exception e) {
            // Silent fail for toast errors
        }
    }
    
    @Override
    protected void onResume() {
        super.onResume();
        try {
            if (!isRealTimeListening && firebaseApiService != null) {
                startRealTimeUpdates();
            }
        } catch (Exception e) {
            showToast("Error resuming app: " + e.getMessage());
        }
    }
    
    @Override
    protected void onPause() {
        super.onPause();
        try {
            if (firebaseApiService != null) {
                firebaseApiService.stopListening();
                isRealTimeListening = false;
            }
        } catch (Exception e) {
            showToast("Error pausing app: " + e.getMessage());
        }
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            if (firebaseApiService != null) {
                firebaseApiService.stopListening();
            }
            if (executorService != null) {
                executorService.shutdown();
            }
        } catch (Exception e) {
            // Silent fail on destroy
        }
    }
} 